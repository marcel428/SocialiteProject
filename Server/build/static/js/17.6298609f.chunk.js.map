{"version":3,"sources":["Components/Preview/index.js"],"names":["Preview","props","state","template","JSON","parse","localStorage","getItem","videoFilePath","videoWidth","videoHeight","faceVideo","mainVideo","crop","unit","width","height","x","y","shouldRedirect","templateRedirect","faceRedirect","mainRedirect","savedVideo","loading","percent","mainVideoWidth","mainVideoHeight","faceVideoWidth","faceVideoHeight","faceMarginLeftAndRight","faceMarginTop","faceMarginBottom","totalVideoWidth","totalVideoHeight","handleCrop","percentCrop","setState","sendSelectedVideo","axios","post","process","then","res","console","log","data","goToTemplate","goToRedo","videoPlayer","React","createRef","videoPlayer_2","this","removeItem","to","pathname","prop","winCenterX","window","innerWidth","sourceRatio","displayPreviewWidth","gamerVideo","faceRatio","facePreviewWidth","facePreviewHeight","totalFaceVideoWidth","totalFaceVideoHeight","clipTop","clipLeft","clipRight","clipBottom","faceMarginLeft","mainRatio","totalMainVideoWidth","totalMainVideoHeight","mainClipTop","mainClipRight","mainClipBottom","mainClipLeft","mainMarginLeft","mainMarginBottom","totalVideoDivHeight","setItem","style","marginBottom","type","checked","value","readOnly","maxHeight","overflow","muted","ref","onLoadedData","current","play","src","position","clipPath","left","bottom","textAlign","marginTop","onClick","Component"],"mappings":"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","file":"static/js/17.6298609f.chunk.js","sourcesContent":["import React, { Component, useRef } from \"react\";\r\nimport ReactPlayer from 'react-player'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { format } from \"react-string-format\";\r\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n\r\nimport ReactCrop from 'react-image-crop';\r\n\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './Preview.css';\r\n\r\nconst ENDPOINT = \"http://localhost:9999\";\r\n\r\n\r\n\r\nclass Preview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoPlayer = React.createRef();\r\n        this.videoPlayer_2 = React.createRef();\r\n    }\r\n    state = {\r\n        template: JSON.parse(localStorage.getItem('template')),\r\n        videoFilePath: localStorage.getItem('videoFilePath'),\r\n        videoWidth: localStorage.getItem('videoWidth'),\r\n        videoHeight: localStorage.getItem('videoHeight'),\r\n        faceVideo: localStorage.getItem('faceVideo') ? JSON.parse(localStorage.getItem('faceVideo')) : null,\r\n        mainVideo: JSON.parse(localStorage.getItem('mainVideo')),\r\n        crop: {\r\n            unit: 'px',\r\n            width: 100,\r\n            height: 100,\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        shouldRedirect: false,\r\n        templateRedirect: false,\r\n        faceRedirect: false,\r\n        mainRedirect: false,\r\n        savedVideo: '',\r\n        loading: false,\r\n\r\n        percent: 0.3,\r\n\r\n        mainVideoWidth: '',\r\n        mainVideoHeight: '',\r\n        faceVideoWidth: '',\r\n        faceVideoHeight: '',\r\n        faceMarginLeftAndRight: '',\r\n        faceMarginTop: '',\r\n        faceMarginBottom: '',\r\n        totalVideoWidth: '',\r\n        totalVideoHeight: '',\r\n\r\n    }\r\n    handleCrop = (crop, percentCrop) => {\r\n        this.setState({ crop })\r\n    }\r\n    sendSelectedVideo = () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n\r\n\r\n        axios\r\n            .post(\r\n                `${process.env.REACT_APP_API_URL}/editor/thumbnail`, {\r\n                videoFilePath: this.state.videoFilePath,\r\n                template: this.state.template,\r\n                faceVideo: this.state.faceVideo ? this.state.faceVideo : null,\r\n                mainVideo: this.state.mainVideo\r\n            })\r\n            .then((res) => {\r\n                console.log('res')\r\n                console.log(res)\r\n                this.setState({\r\n                    loading: false,\r\n                    shouldRedirect: true,\r\n                    savedVideo: res.data\r\n                })\r\n\r\n            });\r\n    }\r\n    goToTemplate=()=>{\r\n        this.setState({\r\n            templateRedirect:true\r\n        })\r\n    }\r\n    goToRedo=()=>{\r\n        if(this.state.faceVideo){\r\n            this.setState({\r\n                faceRedirect:true\r\n            }) \r\n            return;\r\n        }\r\n        if(!this.state.faceVideo){\r\n            this.setState({\r\n                mainRedirect:true\r\n            }) \r\n            return;\r\n        } \r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.socket = socketIOClient();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.templateRedirect) {\r\n            localStorage.removeItem('faceVideo');\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `template`\r\n                }} />\r\n        }\r\n        if (this.state.faceRedirect) {\r\n            localStorage.removeItem('faceVideo');\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `face-edit`\r\n                }} />\r\n        }\r\n        if (this.state.mainRedirect) {\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `main-edit`\r\n                }} />\r\n        }\r\n        const prop = this.state;\r\n        const winCenterX = window.innerWidth / 2;\r\n        const faceWinCenterY = 100;\r\n        const sourceRatio = prop.template.mainVideo.height / prop.template.mainVideo.width;\r\n        const displayPercentInSave = 0.3;\r\n        const displayPreviewWidth = window.innerWidth * displayPercentInSave;\r\n\r\n        if (prop.template.gamerVideo) {\r\n            //get ration btw face clip video and main clip Video\r\n            let faceRatio = displayPreviewWidth / prop.faceVideo.width;\r\n            let facePreviewWidth = displayPreviewWidth;\r\n            var facePreviewHeight = displayPreviewWidth * sourceRatio * prop.template.gamerVideo.height;\r\n\r\n            //zoom the source video by the faceRatio\r\n            var totalFaceVideoWidth = prop.videoWidth * faceRatio;\r\n            var totalFaceVideoHeight = prop.videoHeight * faceRatio;\r\n\r\n            //get the clip path of face video\r\n            var clipTop = prop.faceVideo.y * faceRatio;\r\n            var clipLeft = prop.faceVideo.x * faceRatio;\r\n            var clipRight = totalFaceVideoWidth - clipLeft - facePreviewWidth;\r\n            var clipBottom = totalFaceVideoHeight - (prop.faceVideo.y * faceRatio) - facePreviewHeight;\r\n\r\n\r\n            //get the magin left value to fix the face video to the center.\r\n            var faceCenterX = clipLeft + facePreviewWidth / 2;\r\n            var faceMarginLeft = winCenterX - faceCenterX;\r\n\r\n            //get the margin bottom value to fix the face video to the top\r\n            var faceMarginBottom = prop.faceVideo.y * faceRatio;\r\n\r\n        }\r\n\r\n        //get the clip path of main video\r\n        let mainRatio = displayPreviewWidth / prop.mainVideo.width;\r\n\r\n        //zoom the source video by the mainRatio\r\n        var totalMainVideoWidth = prop.videoWidth * mainRatio;\r\n        var totalMainVideoHeight = prop.videoHeight * mainRatio;\r\n\r\n        var mainClipTop = prop.mainVideo.y * mainRatio;\r\n        var mainClipRight = prop.videoWidth * mainRatio - prop.mainVideo.x * mainRatio - prop.mainVideo.width * mainRatio;\r\n        var mainClipBottom = prop.videoHeight * mainRatio - prop.mainVideo.y * mainRatio - prop.mainVideo.height * mainRatio;\r\n        var mainClipLeft = prop.mainVideo.x * mainRatio;\r\n\r\n\r\n        //get the magin left value to fix the main video to the center.\r\n        var mainCenterX = prop.mainVideo.x * mainRatio + prop.mainVideo.width * mainRatio / 2;\r\n        var mainMarginLeft = winCenterX - mainCenterX;\r\n\r\n        //to delete the small gap btw face video and main video\r\n        //cos div has a small margin.\r\n        var differ = 5;\r\n        //get the margin bottom value to link the main video to the face video\r\n        if (prop.template.gamerVideo) {\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio + (totalFaceVideoHeight - facePreviewHeight) + differ;\r\n        }\r\n        else\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio;\r\n\r\n        const totalVideoDivHeight = displayPreviewWidth * sourceRatio;\r\n\r\n        //redirecting save page after receiving server response.\r\n        //pass recieved saved video file name and display percent. it is needed for syncronizing \r\n        //the size of video in preview page and save page.\r\n\r\n        if (this.state.shouldRedirect) {\r\n            localStorage.setItem('savedVideo',this.state.savedVideo)\r\n            localStorage.setItem('displayPercentInSave',displayPercentInSave)\r\n            return <Redirect\r\n                to={{\r\n                    pathname: 'save',\r\n                }}\r\n            />\r\n        }\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.loading\r\n                        ?\r\n                        <div>\r\n                            Wait a second\r\n                        </div>\r\n                        :\r\n                        <div >\r\n                            <div style={{ marginBottom: \"30px\" }}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.gamerVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select Facecam&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n\r\n                                    </Col>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.mainVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select gamefeed&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <span>Preview&nbsp;&nbsp;</span>\r\n                                        <input type=\"checkbox\" checked value={1} readOnly />\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                            <div style={{ maxHeight: totalVideoDivHeight, overflow: \"hidden\", width: \"fit-content\" }}>\r\n                                {\r\n                                    prop.template.gamerVideo\r\n                                        ?\r\n                                        <div>\r\n                                            <video\r\n                                            muted\r\n                                            ref={this.videoPlayer}\r\n                                            onLoadedData={() => this.videoPlayer.current.play()}\r\n                                                width={totalFaceVideoWidth}\r\n                                                height={totalFaceVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${clipTop}px ${clipRight}px ${clipBottom}px ${clipLeft}px)`,\r\n                                                    left: faceMarginLeft,\r\n                                                    bottom: faceMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                        </div>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <div>\r\n                                    <video\r\n                                    muted\r\n                                     ref={this.videoPlayer_2}\r\n                                     onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                        width={totalMainVideoWidth}\r\n                                        height={totalMainVideoHeight}\r\n                                        src={this.state.videoFilePath}\r\n                                        style={{\r\n                                            position: 'relative',\r\n                                            clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                            left: mainMarginLeft,\r\n                                            bottom: mainMarginBottom\r\n                                        }}\r\n                                    >\r\n\r\n                                    </video>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                            <div style={{ textAlign: \"center\", marginTop: '30px', marginBottom: 30 }}>\r\n                                <div>\r\n                                    <button onClick={this.goToTemplate}>\r\n                                        Change Template\r\n                                    </button>\r\n                                    <button onClick={this.goToRedo}>\r\n                                        Redo\r\n                                    </button>\r\n                                </div>\r\n                                <div>\r\n                                    <button onClick={this.sendSelectedVideo}>\r\n                                        save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n\r\nconst videoComponent = (props) => (\r\n\r\n    <video\r\n        autoPlay\r\n        loop\r\n        style={{ display: 'block', maxWidth: '100%' }}\r\n        onLoadStart={e => {\r\n            // You must inform ReactCrop when your media has loaded.\r\n            e.target.dispatchEvent(new Event('medialoaded', { bubbles: true }));\r\n        }}\r\n    >\r\n        <source src={props} type=\"video/mp4\" />\r\n    </video>\r\n);"],"sourceRoot":""}