{"version":3,"sources":["Components/Preview/index.js"],"names":["Preview","props","state","template","JSON","parse","localStorage","getItem","videoFilePath","videoWidth","videoHeight","faceVideo","mainVideo","crop","unit","width","height","x","y","shouldRedirect","templateRedirect","faceRedirect","mainRedirect","savedVideo","loading","percent","mainVideoWidth","mainVideoHeight","faceVideoWidth","faceVideoHeight","faceMarginLeftAndRight","faceMarginTop","faceMarginBottom","totalVideoWidth","totalVideoHeight","io","progress","handleCrop","percentCrop","setState","sendSelectedVideo","socket","emit","axios","post","process","then","res","console","log","disconnect","data","goToTemplate","goToRedo","setLoading","videoPlayer_2","React","createRef","videoPlayer","this","socketIOClient","mode","on","setTimeout","removeItem","to","pathname","prop","winCenterX","window","innerWidth","sourceRatio","displayPreviewWidth","gamerVideo","faceRatio","facePreviewWidth","facePreviewHeight","totalFaceVideoWidth","totalFaceVideoHeight","clipTop","clipLeft","clipRight","clipBottom","faceMarginLeft","mainRatio","totalMainVideoWidth","totalMainVideoHeight","mainClipTop","mainClipRight","mainClipBottom","mainClipLeft","mainMarginLeft","name","mainMarginBottom","totalVideoDivHeight","setItem","style","justifyContent","now","label","marginBottom","type","checked","value","readOnly","maxHeight","overflow","display","muted","ref","onLoadedData","current","play","src","position","clipPath","left","bottom","textAlign","marginTop","onClick","Component"],"mappings":"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","file":"static/js/17.e166d50b.chunk.js","sourcesContent":["import React, { Component, useRef } from \"react\";\r\nimport ReactPlayer from 'react-player'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { format } from \"react-string-format\";\r\nimport { Row, Col, Card, Button, ProgressBar } from \"react-bootstrap\";\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n\r\nimport ReactCrop from 'react-image-crop';\r\n\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './Preview.css';\r\n\r\n\r\n\r\nclass Preview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoPlayer_2 = React.createRef();\r\n        this.videoPlayer = React.createRef();\r\n    }\r\n    state = {\r\n        template: JSON.parse(localStorage.getItem('template')),\r\n        videoFilePath: localStorage.getItem('videoFilePath'),\r\n        videoWidth: localStorage.getItem('videoWidth'),\r\n        videoHeight: localStorage.getItem('videoHeight'),\r\n        faceVideo: localStorage.getItem('faceVideo') ? JSON.parse(localStorage.getItem('faceVideo')) : null,\r\n        mainVideo: JSON.parse(localStorage.getItem('mainVideo')),\r\n        crop: {\r\n            unit: 'px',\r\n            width: 100,\r\n            height: 100,\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        shouldRedirect: false,\r\n        templateRedirect: false,\r\n        faceRedirect: false,\r\n        mainRedirect: false,\r\n        savedVideo: '',\r\n        loading: false,\r\n\r\n        percent: 0.3,\r\n\r\n        mainVideoWidth: '',\r\n        mainVideoHeight: '',\r\n        faceVideoWidth: '',\r\n        faceVideoHeight: '',\r\n        faceMarginLeftAndRight: '',\r\n        faceMarginTop: '',\r\n        faceMarginBottom: '',\r\n        totalVideoWidth: '',\r\n        totalVideoHeight: '',\r\n        io: '',\r\n        progress: 0\r\n\r\n    }\r\n    handleCrop = (crop, percentCrop) => {\r\n        this.setState({ crop })\r\n    }\r\n    sendSelectedVideo = () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        this.socket.emit('start', 'progressing is started...');\r\n        axios\r\n            .post(\r\n                `${process.env.REACT_APP_API_URL}/editor/thumbnail`, {\r\n                videoFilePath: this.state.videoFilePath,\r\n                template: this.state.template,\r\n                faceVideo: this.state.faceVideo ? this.state.faceVideo : null,\r\n                mainVideo: this.state.mainVideo\r\n            })\r\n            .then((res) => {\r\n                console.log('res')\r\n                console.log(res)\r\n                this.socket.disconnect();\r\n\r\n                this.setState({\r\n                    progress: 100,\r\n                    savedVideo: res.data\r\n                })\r\n\r\n            });\r\n    }\r\n    goToTemplate = () => {\r\n        this.setState({\r\n            templateRedirect: true\r\n        })\r\n    }\r\n    goToRedo = () => {\r\n        if (this.state.faceVideo) {\r\n            this.setState({\r\n                faceRedirect: true\r\n            })\r\n            return;\r\n        }\r\n        if (!this.state.faceVideo) {\r\n            this.setState({\r\n                mainRedirect: true\r\n            })\r\n            return;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = socketIOClient(process.env.REACT_APP_SOCKET_ENDPOINT,{ mode: \"no-cors\" });\r\n        this.socket.on('progressStatus', (data) => {\r\n            this.setState({\r\n                progress: data\r\n            })\r\n        })\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.progress == 100) {\r\n            setTimeout(this.setLoading, 1000);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.socket.disconnect();\r\n    }\r\n    setLoading = () => {\r\n        this.setState({\r\n            loading: false,\r\n            shouldRedirect: true,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.templateRedirect) {\r\n            localStorage.removeItem('faceVideo');\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `template`\r\n                }} />\r\n        }\r\n        if (this.state.faceRedirect) {\r\n            localStorage.removeItem('faceVideo');\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `face-edit`\r\n                }} />\r\n        }\r\n        if (this.state.mainRedirect) {\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `main-edit`\r\n                }} />\r\n        }\r\n        const prop = this.state;\r\n        const winCenterX = window.innerWidth / 2;\r\n        const faceWinCenterY = 100;\r\n        const sourceRatio = prop.template.mainVideo.height / prop.template.mainVideo.width;\r\n        const displayPercentInSave = 0.3;\r\n        const displayPreviewWidth = window.innerWidth * displayPercentInSave;\r\n\r\n        /*********************************************************************************************************\r\n                                             \r\n                                              *****************\r\n\r\n                                            if gamer video exists\r\n\r\n                                              *****************\r\n\r\n        *********************************************************************************************************/\r\n        if (prop.template.gamerVideo) {\r\n            //get ratio btw face clip video and main clip Video\r\n            var faceRatio = displayPreviewWidth * prop.template.gamerVideo.width / prop.faceVideo.width;\r\n            var facePreviewWidth = displayPreviewWidth * prop.template.gamerVideo.width;\r\n            var facePreviewHeight = displayPreviewWidth * sourceRatio * prop.template.gamerVideo.height;\r\n\r\n            //zoom the source video by the faceRatio\r\n            var totalFaceVideoWidth = prop.videoWidth * faceRatio;\r\n            var totalFaceVideoHeight = prop.videoHeight * faceRatio;\r\n\r\n            //get the clip path of face video\r\n            var clipTop = prop.faceVideo.y * faceRatio;\r\n            var clipLeft = prop.faceVideo.x * faceRatio;\r\n            var clipRight = totalFaceVideoWidth - clipLeft - facePreviewWidth;\r\n            var clipBottom = totalFaceVideoHeight - (prop.faceVideo.y * faceRatio) - facePreviewHeight;\r\n\r\n\r\n            //get the magin left value to fix the face video to the center.\r\n            var faceCenterX = clipLeft + facePreviewWidth / 2;\r\n            var faceMarginLeft = winCenterX - faceCenterX;\r\n\r\n            //get the margin bottom value to fix the face video to the top\r\n\r\n            var faceMarginBottom = prop.faceVideo.y * faceRatio;\r\n\r\n        }\r\n\r\n        /*********************************************************************************************************\r\n                                             \r\n                                              *****************\r\n                                              \r\n                                                Main Video\r\n\r\n                                              *****************\r\n\r\n        *********************************************************************************************************/\r\n\r\n        //get the clip path of main video\r\n        let mainRatio = displayPreviewWidth / prop.mainVideo.width;\r\n\r\n        //zoom the source video by the mainRatio\r\n        var totalMainVideoWidth = prop.videoWidth * mainRatio;\r\n        var totalMainVideoHeight = prop.videoHeight * mainRatio;\r\n\r\n        var mainClipTop = prop.mainVideo.y * mainRatio;\r\n        var mainClipRight = prop.videoWidth * mainRatio - prop.mainVideo.x * mainRatio - prop.mainVideo.width * mainRatio;\r\n        var mainClipBottom = prop.videoHeight * mainRatio - prop.mainVideo.y * mainRatio - prop.mainVideo.height * mainRatio;\r\n        var mainClipLeft = prop.mainVideo.x * mainRatio;\r\n\r\n\r\n        //get the magin left value to fix the main video to the center.\r\n        var mainCenterX = prop.mainVideo.x * mainRatio + prop.mainVideo.width * mainRatio / 2;\r\n        var mainMarginLeft = winCenterX - mainCenterX;\r\n\r\n        //to delete the small gap btw face video and main video\r\n        //cos div has a small margin.\r\n        var differ = 5;\r\n        //get the margin bottom value to link the main video to the face video\r\n        if (prop.template.name == \"split\") {\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio + (totalFaceVideoHeight - facePreviewHeight) + differ;\r\n        } else\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio;\r\n\r\n        if (prop.template.name == \"smallfacecam\" || prop.template.name == \"square\") {\r\n            faceMarginBottom = prop.faceVideo.y * faceRatio + (totalMainVideoHeight * (1 - prop.template.gamerVideo.y));\r\n        }\r\n\r\n\r\n        var totalVideoDivHeight = displayPreviewWidth * sourceRatio;\r\n\r\n        /*********************************************************************************************************\r\n                                     \r\n                                                *****************\r\n                                                \r\n                                                    if template is \"blurred\"\r\n\r\n                                                *****************\r\n\r\n        *********************************************************************************************************/\r\n\r\n        // if (prop.template.name == \"blurred\") {\r\n        //     var srcRatio=prop.videoHeight/prop.videoWidth;\r\n        //     var blurRatio=prop.template.mainVideo.height/prop.template.mainVideo.width;\r\n        //     var ratioW = displayPreviewWidth / prop.mainVideo.width;\r\n        //     var ratioH = ratioW*blurRatio / prop.template.realHeight;\r\n        //     var blurPreW = displayPreviewWidth;\r\n        //     var blurPreH = displayPreviewWidth*blurRatio / prop.template.realHeight;\r\n        //     var totalBlurW = prop.videoWidth * ratioH;\r\n        //     var totalBlurH = prop.videoHeight * ratioH;\r\n        //     var blurClipTop = prop.mainVideo.y * ratioH;\r\n        //     var blurClipRight = totalBlurW - prop.mainVideo.x * ratioH - blurPreW;\r\n        //     var blurClipBottom = totalBlurH - prop.mainVideo.y * ratioH - blurPreH;\r\n        //     var blurClipLeft = prop.mainVideo.x * ratioH;\r\n\r\n        //     var BlurCenterX = prop.mainVideo.x * ratioH + blurPreW / 2;\r\n        //     var blurMarginLeft = winCenterX - BlurCenterX;\r\n        //     var blurMarginBottom=blurClipTop;\r\n\r\n        //     totalVideoDivHeight=blurPreH;\r\n        // }\r\n\r\n\r\n        //redirecting save page after receiving server response.\r\n        //pass recieved saved video file name and display percent. it is needed for syncronizing \r\n        //the size of video in preview page and save page.\r\n\r\n        if (this.state.shouldRedirect) {\r\n            localStorage.setItem('savedVideo', this.state.savedVideo)\r\n            localStorage.setItem('displayPercentInSave', displayPercentInSave)\r\n            return <Redirect\r\n                to={{\r\n                    pathname: 'save',\r\n                }}\r\n            />\r\n        }\r\n        console.log('this.state')\r\n        console.log(this.state)\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.loading\r\n                        ?\r\n                        <div style={{ width: '100%', justifyContent: 'center' }}>\r\n                            <ProgressBar now={this.state.progress} label={`${this.state.progress}%`} style={{ width: '100%' }} />\r\n                        </div>\r\n                        :\r\n                        <div >\r\n                            <div style={{ marginBottom: \"30px\" }}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.gamerVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select Facecam&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n\r\n                                    </Col>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.mainVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select gamefeed&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <span>Preview&nbsp;&nbsp;</span>\r\n                                        <input type=\"checkbox\" checked value={1} readOnly />\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                            <div style={{ maxHeight: totalVideoDivHeight, overflow: \"hidden\"}} >\r\n                                {\r\n                                    prop.template.name == \"split\"\r\n                                        ?\r\n                                        <div style={{display:\"grid\"}}>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer}\r\n                                                onLoadedData={() => this.videoPlayer.current.play()}\r\n                                                width={totalFaceVideoWidth}\r\n                                                height={totalFaceVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${clipTop}px ${clipRight}px ${clipBottom}px ${clipLeft}px)`,\r\n                                                    left: faceMarginLeft,\r\n                                                    bottom: faceMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer_2}\r\n                                                onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                                width={totalMainVideoWidth}\r\n                                                height={totalMainVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                                    left: mainMarginLeft,\r\n                                                    bottom: mainMarginBottom\r\n                                                }}\r\n                                            >\r\n\r\n                                            </video>\r\n                                        </div>\r\n                                        : null\r\n                                }\r\n                                {\r\n                                    prop.template.name == \"fullscreen\"\r\n                                        ?\r\n                                        <video\r\n                                            muted\r\n                                            ref={this.videoPlayer_2}\r\n                                            onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                            width={totalMainVideoWidth}\r\n                                            height={totalMainVideoHeight}\r\n                                            src={this.state.videoFilePath}\r\n                                            style={{\r\n                                                position: 'relative',\r\n                                                clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                                left: mainMarginLeft,\r\n                                                bottom: mainMarginBottom\r\n                                            }}\r\n                                        >\r\n\r\n                                        </video>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {/* {\r\n                                    prop.template.name == \"blurred\"\r\n                                        ?\r\n                                        <video\r\n                                            muted\r\n                                            ref={this.videoPlayer_2}\r\n                                            onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                            width={totalBlurW}\r\n                                            height={totalBlurH}\r\n                                            src={this.state.videoFilePath}\r\n                                            style={{\r\n                                                position: 'relative',\r\n                                                clipPath: `inset(${blurClipTop}px ${blurClipRight}px ${blurClipBottom}px ${blurClipLeft}px)`,\r\n                                                left: blurMarginLeft,\r\n                                                bottom: blurMarginBottom\r\n                                            }}\r\n                                        >\r\n\r\n                                        </video>\r\n                                        :\r\n                                        null\r\n                                } */}\r\n\r\n                                {\r\n                                    prop.template.name == \"smallfacecam\" || prop.template.name == \"square\"\r\n                                        ?\r\n                                        <div style={{display:\"grid\"}}>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer_2}\r\n                                                onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                                width={totalMainVideoWidth}\r\n                                                height={totalMainVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                                    left: mainMarginLeft,\r\n                                                    bottom: mainMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer}\r\n                                                onLoadedData={() => this.videoPlayer.current.play()}\r\n                                                width={totalFaceVideoWidth}\r\n                                                height={totalFaceVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${clipTop}px ${clipRight}px ${clipBottom}px ${clipLeft}px)`,\r\n                                                    left: faceMarginLeft,\r\n                                                    bottom: faceMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                        </div>\r\n                                        : null\r\n                                }\r\n\r\n                            </div>\r\n                            <div style={{ textAlign: \"center\", marginTop: '30px', marginBottom: 30 }}>\r\n                                <div>\r\n                                    <button onClick={this.goToTemplate}>\r\n                                        Change Template\r\n                                    </button>\r\n                                    <button onClick={this.goToRedo}>\r\n                                        Redo\r\n                                    </button>\r\n                                </div>\r\n                                <div>\r\n                                    <button onClick={this.sendSelectedVideo}>\r\n                                        save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n\r\nconst videoComponent = (props) => (\r\n\r\n    <video\r\n        autoPlay\r\n        loop\r\n        style={{ display: 'block', maxWidth: '100%' }}\r\n        onLoadStart={e => {\r\n            // You must inform ReactCrop when your media has loaded.\r\n            e.target.dispatchEvent(new Event('medialoaded', { bubbles: true }));\r\n        }}\r\n    >\r\n        <source src={props} type=\"video/mp4\" />\r\n    </video>\r\n);"],"sourceRoot":""}