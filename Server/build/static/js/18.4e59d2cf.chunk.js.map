{"version":3,"sources":["Components/Preview/index.js"],"names":["Preview","props","state","template","location","query","videoFilePath","videoWidth","videoHeight","crop","unit","width","height","x","y","shouldRedirect","savedVideo","loading","percent","mainVideoWidth","mainVideoHeight","faceVideoWidth","faceVideoHeight","faceMarginLeftAndRight","faceMarginTop","faceMarginBottom","totalVideoWidth","totalVideoHeight","handleCrop","percentCrop","setState","sendSelectedVideo","axios","post","process","faceVideo","mainVideo","then","res","console","log","data","this","socket","socketIOClient","disconnect","prop","winCenterX","window","innerWidth","sourceRatio","displayPreviewWidth","gamerVideo","faceRatio","facePreviewWidth","facePreviewHeight","totalFaceVideoWidth","totalFaceVideoHeight","clipTop","clipLeft","clipRight","clipBottom","faceMarginLeft","mainRatio","totalMainVideoWidth","totalMainVideoHeight","mainClipTop","mainClipRight","mainClipBottom","mainClipLeft","mainMarginLeft","mainMarginBottom","totalVideoDivHeight","to","pathname","displayPercentInSave","style","marginBottom","type","checked","value","readOnly","maxHeight","overflow","autoPlay","src","position","clipPath","left","bottom","textAlign","marginTop","onClick","Component"],"mappings":"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","file":"static/js/18.4e59d2cf.chunk.js","sourcesContent":["import React, { Component, useRef } from \"react\";\r\nimport ReactPlayer from 'react-player'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { format } from \"react-string-format\";\r\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n\r\nimport ReactCrop from 'react-image-crop';\r\n\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './Preview.css';\r\n\r\nconst ENDPOINT = \"http://localhost:9999\";\r\n   \r\n\r\n\r\nclass Preview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    state = {\r\n        template: this.props.location.query,\r\n        videoFilePath: this.props.location.videoFilePath,\r\n        videoWidth: this.props.location.videoWidth,\r\n        videoHeight: this.props.location.videoHeight,\r\n        crop: {\r\n            unit: 'px',\r\n            width: 100,\r\n            height: 100,\r\n            x: (this.props.location.videoWidth - 100) / 2,\r\n            y: (this.props.location.videoHeight - 100) / 2\r\n        },\r\n        shouldRedirect: false,\r\n        savedVideo: '',\r\n        loading: false,\r\n\r\n        percent: 0.3,\r\n\r\n        mainVideoWidth: '',\r\n        mainVideoHeight: '',\r\n        faceVideoWidth: '',\r\n        faceVideoHeight: '',\r\n        faceMarginLeftAndRight: '',\r\n        faceMarginTop: '',\r\n        faceMarginBottom: '',\r\n        totalVideoWidth: '',\r\n        totalVideoHeight: '',\r\n\r\n    }\r\n    handleCrop = (crop, percentCrop) => {\r\n        this.setState({ crop })\r\n    }\r\n    sendSelectedVideo = () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n\r\n\r\n        axios\r\n            .post(\r\n                `${process.env.REACT_APP_API_URL}/editor/thumbnail`, {\r\n                videoFilePath: this.props.location.videoFilePath,\r\n                template: this.props.location.query,\r\n                faceVideo: this.props.location.faceVideo ? this.props.location.faceVideo : null,\r\n                mainVideo: this.props.location.mainVideo\r\n            })\r\n            .then((res) => {\r\n                console.log('res')\r\n                console.log(res)\r\n                this.setState({\r\n                    loading: false,\r\n                    shouldRedirect: true,\r\n                    savedVideo: res.data\r\n                })\r\n\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = socketIOClient();\r\n    }\r\n    componentWillUnmount(){\r\n        console.log('unmounted')\r\n        this.socket.disconnect();\r\n      }\r\n\r\n\r\n    render() {\r\n        const prop = this.props.location;\r\n        const winCenterX = window.innerWidth / 2;\r\n        const faceWinCenterY = 100;\r\n        const sourceRatio = prop.query.mainVideo.height / prop.query.mainVideo.width;\r\n        const displayPercentInSave = 0.3;\r\n        const displayPreviewWidth = window.innerWidth * displayPercentInSave;\r\n\r\n        if (prop.query.gamerVideo) {\r\n            //get ration btw face clip video and main clip Video\r\n            let faceRatio = displayPreviewWidth / prop.faceVideo.width;\r\n            let facePreviewWidth = displayPreviewWidth;\r\n            var facePreviewHeight = displayPreviewWidth * sourceRatio * prop.query.gamerVideo.height;\r\n\r\n            //zoom the source video by the faceRatio\r\n            var totalFaceVideoWidth = prop.videoWidth * faceRatio;\r\n            var totalFaceVideoHeight = prop.videoHeight * faceRatio;\r\n\r\n            //get the clip path of face video\r\n            var clipTop = prop.faceVideo.y * faceRatio;\r\n            var clipLeft = prop.faceVideo.x * faceRatio;\r\n            var clipRight = totalFaceVideoWidth - clipLeft - facePreviewWidth;\r\n            var clipBottom = totalFaceVideoHeight - (prop.faceVideo.y * faceRatio) - facePreviewHeight;\r\n\r\n\r\n            //get the magin left value to fix the face video to the center.\r\n            var faceCenterX = clipLeft + facePreviewWidth / 2;\r\n            var faceMarginLeft = winCenterX - faceCenterX;\r\n\r\n            //get the margin bottom value to fix the face video to the top\r\n            var faceMarginBottom = prop.faceVideo.y * faceRatio;\r\n\r\n        }\r\n\r\n        //get the clip path of main video\r\n        let mainRatio = displayPreviewWidth / prop.mainVideo.width;\r\n\r\n        //zoom the source video by the mainRatio\r\n        var totalMainVideoWidth = prop.videoWidth * mainRatio;\r\n        var totalMainVideoHeight = prop.videoHeight * mainRatio;\r\n\r\n        var mainClipTop = prop.mainVideo.y * mainRatio;\r\n        var mainClipRight = prop.videoWidth * mainRatio - prop.mainVideo.x * mainRatio - prop.mainVideo.width * mainRatio;\r\n        var mainClipBottom = prop.videoHeight * mainRatio - prop.mainVideo.y * mainRatio - prop.mainVideo.height * mainRatio;\r\n        var mainClipLeft = prop.mainVideo.x * mainRatio;\r\n\r\n\r\n        //get the magin left value to fix the main video to the center.\r\n        var mainCenterX = prop.mainVideo.x * mainRatio + prop.mainVideo.width * mainRatio / 2;\r\n        var mainMarginLeft = winCenterX - mainCenterX;\r\n\r\n        //to delete the small gap btw face video and main video\r\n        //cos div has a small margin.\r\n        var differ = 5;\r\n        //get the margin bottom value to link the main video to the face video\r\n        if (prop.query.gamerVideo) {\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio + (totalFaceVideoHeight - facePreviewHeight) + differ;\r\n        }\r\n        else\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio;\r\n\r\n        const totalVideoDivHeight = displayPreviewWidth * sourceRatio;\r\n\r\n        //redirecting save page after receiving server response.\r\n        //pass recieved saved video file name and display percent. it is needed for syncronizing \r\n        //the size of video in preview page and save page.\r\n\r\n        if (this.state.shouldRedirect) {\r\n            return <Redirect\r\n                to={{\r\n                    pathname: 'save',\r\n                    savedVideo: this.state.savedVideo,\r\n                    displayPercentInSave\r\n                }}\r\n            />\r\n        }\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.loading\r\n                        ?\r\n                        <div>\r\n                            Wait a second\r\n                        </div>\r\n                        :\r\n                        <div >\r\n                            <div style={{ marginBottom: \"30px\" }}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.gamerVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select Facecam&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n\r\n                                    </Col>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.mainVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select gamefeed&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <span>Preview&nbsp;&nbsp;</span>\r\n                                        <input type=\"checkbox\" checked value={1} readOnly />\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                            <div style={{ maxHeight: totalVideoDivHeight, overflow: \"hidden\", width: \"fit-content\" }}>\r\n                                {\r\n                                    prop.query.gamerVideo\r\n                                        ?\r\n                                        <div>\r\n                                            <video\r\n                                                autoPlay\r\n                                                width={totalFaceVideoWidth}\r\n                                                height={totalFaceVideoHeight}\r\n                                                src={this.props.location.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${clipTop}px ${clipRight}px ${clipBottom}px ${clipLeft}px)`,\r\n                                                    left: faceMarginLeft,\r\n                                                    bottom: faceMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                        </div>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <div>\r\n                                    <video\r\n                                        autoPlay\r\n                                        width={totalMainVideoWidth}\r\n                                        height={totalMainVideoHeight}\r\n                                        src={this.props.location.videoFilePath}\r\n                                        style={{\r\n                                            position: 'relative',\r\n                                            clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                            left: mainMarginLeft,\r\n                                            bottom: mainMarginBottom\r\n                                        }}\r\n                                    >\r\n\r\n                                    </video>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                            <div style={{ textAlign: \"center\", marginTop: '30px', marginBottom: 30 }}>\r\n                                <div>\r\n                                    <Link\r\n                                        to={{\r\n                                            pathname: \"/template\",\r\n                                            state: {\r\n                                                videoFilePath: prop.videoFilePath,\r\n                                                videoWidth: prop.videoWidth,\r\n                                                videoHeight: prop.videoHeight\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <button>\r\n                                            Change template\r\n                                        </button>\r\n                                    </Link>\r\n                                    <Link\r\n                                        to={{\r\n                                            pathname: prop.query.gamerVideo ? 'face-edit' : 'main-edit',\r\n                                            query: prop.query,\r\n                                            videoFilePath: prop.videoFilePath,\r\n                                            videoWidth: prop.videoWidth,\r\n                                            videoHeight: prop.videoHeight,\r\n                                        }} >\r\n                                        <button>\r\n                                            Redo\r\n                                        </button>\r\n                                    </Link>\r\n                                </div>\r\n                                <div>\r\n                                    <button onClick={this.sendSelectedVideo}>\r\n                                        save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n\r\nconst videoComponent = (props) => (\r\n\r\n    <video\r\n        autoPlay\r\n        loop\r\n        style={{ display: 'block', maxWidth: '100%' }}\r\n        onLoadStart={e => {\r\n            // You must inform ReactCrop when your media has loaded.\r\n            e.target.dispatchEvent(new Event('medialoaded', { bubbles: true }));\r\n        }}\r\n    >\r\n        <source src={props} type=\"video/mp4\" />\r\n    </video>\r\n);"],"sourceRoot":""}