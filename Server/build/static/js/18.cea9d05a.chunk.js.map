{"version":3,"sources":["Components/Preview/index.js","Service/idb.js"],"names":["Preview","props","state","template","JSON","parse","localStorage","getItem","videoFilePath","videoFileName","videoWidth","videoHeight","faceVideo","mainVideo","crop","unit","width","height","x","y","shouldRedirect","templateRedirect","faceRedirect","mainRedirect","savedVideo","loading","percent","mainVideoWidth","mainVideoHeight","faceVideoWidth","faceVideoHeight","faceMarginLeftAndRight","faceMarginTop","faceMarginBottom","totalVideoWidth","totalVideoHeight","io","progress","handleCrop","percentCrop","setState","DataURIToBlob","dataURI","splitDataURI","split","byteString","indexOf","atob","decodeURI","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","sendSelectedVideo","a","get","videoBase64","file","formData","FormData","append","config","headers","socket","emit","axios","post","process","then","res","disconnect","data","catch","error","console","log","goToTemplate","goToRedo","setLoading","videoPlayer_2","React","createRef","videoPlayer","this","socketIOClient","on","setTimeout","removeItem","to","pathname","prop","winCenterX","window","innerWidth","sourceRatio","displayPreviewWidth","gamerVideo","templateFaceVideoRatio","ratioBtwClipAndTemplate","faceRatio","facePreviewWidth","facePreviewHeight","totalFaceVideoWidth","totalFaceVideoHeight","clipTop","clipLeft","clipRight","clipBottom","faceMarginLeft","mainRatio","totalMainVideoWidth","totalMainVideoHeight","mainClipTop","mainClipRight","mainClipBottom","mainClipLeft","mainMarginLeft","name","mainMarginBottom","totalVideoDivHeight","setItem","style","justifyContent","now","label","marginBottom","checked","value","readOnly","maxHeight","overflow","display","muted","ref","onLoadedData","current","play","src","position","clipPath","left","bottom","textAlign","marginTop","onClick","Component","dbPromise","openDB","upgrade","db","createObjectStore","key","set","val","put","clear"],"mappings":"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","file":"static/js/18.cea9d05a.chunk.js","sourcesContent":["import React, { Component, useRef } from \"react\";\r\nimport ReactPlayer from 'react-player'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { format } from \"react-string-format\";\r\nimport { Row, Col, Card, Button, ProgressBar } from \"react-bootstrap\";\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n\r\nimport ReactCrop from 'react-image-crop';\r\n\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport './Preview.css';\r\nimport { get, set, del, clear, keys } from \"./../../Service/idb\";\r\n\r\n\r\n\r\nclass Preview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoPlayer_2 = React.createRef();\r\n        this.videoPlayer = React.createRef();\r\n    }\r\n    state = {\r\n        template: JSON.parse(localStorage.getItem('template')),\r\n        videoFilePath: localStorage.getItem('videoFilePath'),\r\n        videoFileName: localStorage.getItem('videoFileName'),\r\n        videoWidth: localStorage.getItem('videoWidth'),\r\n        videoHeight: localStorage.getItem('videoHeight'),\r\n        faceVideo: localStorage.getItem('faceVideo') ? JSON.parse(localStorage.getItem('faceVideo')) : null,\r\n        mainVideo: JSON.parse(localStorage.getItem('mainVideo')),\r\n        crop: {\r\n            unit: 'px',\r\n            width: 100,\r\n            height: 100,\r\n            x: 0,\r\n            y: 0\r\n        },\r\n        shouldRedirect: false,\r\n        templateRedirect: false,\r\n        faceRedirect: false,\r\n        mainRedirect: false,\r\n        savedVideo: '',\r\n        loading: false,\r\n\r\n        percent: 0.3,\r\n\r\n        mainVideoWidth: '',\r\n        mainVideoHeight: '',\r\n        faceVideoWidth: '',\r\n        faceVideoHeight: '',\r\n        faceMarginLeftAndRight: '',\r\n        faceMarginTop: '',\r\n        faceMarginBottom: '',\r\n        totalVideoWidth: '',\r\n        totalVideoHeight: '',\r\n        io: '',\r\n        progress: 1\r\n\r\n    }\r\n    handleCrop = (crop, percentCrop) => {\r\n        this.setState({ crop })\r\n    }\r\n    DataURIToBlob = (dataURI) => {\r\n        const splitDataURI = dataURI.split(',')\r\n        const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1])\r\n        const mimeString = splitDataURI[0].split(':')[1].split(';')[0]\r\n\r\n        const ia = new Uint8Array(byteString.length)\r\n        for (let i = 0; i < byteString.length; i++)\r\n            ia[i] = byteString.charCodeAt(i)\r\n\r\n        return new Blob([ia], { type: mimeString })\r\n    }\r\n    sendSelectedVideo = async () => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        var videoBase64 = await get('videoBase64');\r\n        const file = this.DataURIToBlob(videoBase64);\r\n\r\n\r\n        const formData = new FormData();\r\n        formData.append('myfile', file, this.state.videoFileName);\r\n        formData.append('template', localStorage.getItem('template'));\r\n        formData.append('faceVideo', localStorage.getItem('faceVideo') ? localStorage.getItem('faceVideo') : null);\r\n        formData.append('mainVideo', localStorage.getItem('mainVideo'));\r\n\r\n        const config = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        };\r\n        this.socket.emit('start', 'progressing is started...');\r\n\r\n        axios.\r\n            post(`${process.env.REACT_APP_API_URL}/editor/thumbnail`, formData, config)\r\n            .then((res) => {\r\n\r\n                this.socket.disconnect();\r\n\r\n                this.setState({\r\n                    progress: 100,\r\n                    savedVideo: res.data\r\n                })\r\n\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n\r\n\r\n        // axios\r\n        //     .post(\r\n        //         `${process.env.REACT_APP_API_URL}/editor/thumbnail`, {\r\n        //         template: this.state.template,\r\n        //         faceVideo: this.state.faceVideo ? this.state.faceVideo : null,\r\n        //         mainVideo: this.state.mainVideo,\r\n        //         videoBase64,\r\n        //         videoFileName: this.state.videoFileName\r\n        //     })\r\n        //     .then((res) => {\r\n        //         console.log('res')\r\n        //         console.log(res)\r\n        //         this.socket.disconnect();\r\n\r\n        //         this.setState({\r\n        //             progress: 100,\r\n        //             savedVideo: res.data\r\n        //         })\r\n\r\n        //     });\r\n    }\r\n    goToTemplate = () => {\r\n        this.setState({\r\n            templateRedirect: true\r\n        })\r\n    }\r\n    goToRedo = () => {\r\n        if (this.state.faceVideo) {\r\n            this.setState({\r\n                faceRedirect: true\r\n            })\r\n            return;\r\n        }\r\n        if (!this.state.faceVideo) {\r\n            this.setState({\r\n                mainRedirect: true\r\n            })\r\n            return;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = socketIOClient(process.env.REACT_APP_SOCKET_ENDPOINT);\r\n        this.socket.on('progressStatus', (data) => {\r\n            this.setState({\r\n                progress: data\r\n            })\r\n        })\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.progress == 100) {\r\n            setTimeout(this.setLoading, 1000);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        // this.socket.disconnect();\r\n    }\r\n    setLoading = () => {\r\n        this.setState({\r\n            loading: false,\r\n            shouldRedirect: true,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.templateRedirect) {\r\n            localStorage.removeItem('faceVideo');\r\n            localStorage.removeItem('mainVideo');\r\n            localStorage.removeItem('template');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `template`\r\n                }} />\r\n        }\r\n        if (this.state.faceRedirect) {\r\n            localStorage.removeItem('faceVideo');\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `face-edit`\r\n                }} />\r\n        }\r\n        if (this.state.mainRedirect) {\r\n            localStorage.removeItem('mainVideo');\r\n            return <Redirect\r\n                to={{\r\n                    pathname: `main-edit`\r\n                }} />\r\n        }\r\n        const prop = this.state;\r\n        const winCenterX = window.innerWidth / 2;\r\n        const faceWinCenterY = 100;\r\n        const sourceRatio = prop.template.mainVideo.height / prop.template.mainVideo.width;\r\n        const displayPercentInSave = 0.3;\r\n        const displayPreviewWidth = window.innerWidth * displayPercentInSave;\r\n\r\n        /*********************************************************************************************************\r\n                                             \r\n                                              *****************\r\n\r\n                                            if gamer video exists\r\n\r\n                                              *****************\r\n\r\n        *********************************************************************************************************/\r\n        if (prop.template.gamerVideo) {\r\n            //when selecting the faceVideo using free transfor, we had do add ratio\r\n            // btw selected facevideo / template face video\r\n            var templateFaceVideoRatio=\r\n            (prop.template.mainVideo.height*prop.template.gamerVideo.height)\r\n            /\r\n            (prop.template.mainVideo.width*prop.template.gamerVideo.width);\r\n            var clipVideoRatio=prop.faceVideo.height/prop.faceVideo.width;\r\n\r\n            var ratioBtwClipAndTemplate=clipVideoRatio/templateFaceVideoRatio;\r\n            //get ratio btw face clip video and main clip Video\r\n            var faceRatio = displayPreviewWidth * prop.template.gamerVideo.width / prop.faceVideo.width;\r\n            var facePreviewWidth = displayPreviewWidth * prop.template.gamerVideo.width;\r\n            var facePreviewHeight = displayPreviewWidth * sourceRatio * prop.template.gamerVideo.height*ratioBtwClipAndTemplate;\r\n\r\n            //zoom the source video by the faceRatio\r\n            var totalFaceVideoWidth = prop.videoWidth * faceRatio;\r\n            var totalFaceVideoHeight = prop.videoHeight * faceRatio;\r\n\r\n            //get the clip path of face video\r\n            var clipTop = prop.faceVideo.y * faceRatio;\r\n            var clipLeft = prop.faceVideo.x * faceRatio;\r\n            var clipRight = totalFaceVideoWidth - clipLeft - facePreviewWidth;\r\n            var clipBottom = totalFaceVideoHeight - (prop.faceVideo.y * faceRatio) - facePreviewHeight;\r\n\r\n\r\n            //get the magin left value to fix the face video to the center.\r\n            var faceCenterX = clipLeft + facePreviewWidth / 2;\r\n            var faceMarginLeft = winCenterX - faceCenterX;\r\n\r\n            //get the margin bottom value to fix the face video to the top\r\n\r\n            var faceMarginBottom = prop.faceVideo.y * faceRatio;\r\n\r\n\r\n        }\r\n\r\n        /*********************************************************************************************************\r\n                                             \r\n                                              *****************\r\n                                              \r\n                                                Main Video\r\n\r\n                                              *****************\r\n\r\n        *********************************************************************************************************/\r\n\r\n        //get the clip path of main video\r\n        let mainRatio = displayPreviewWidth / prop.mainVideo.width;\r\n\r\n        //zoom the source video by the mainRatio\r\n        var totalMainVideoWidth = prop.videoWidth * mainRatio;\r\n        var totalMainVideoHeight = prop.videoHeight * mainRatio;\r\n\r\n        var mainClipTop = prop.mainVideo.y * mainRatio;\r\n        var mainClipRight = prop.videoWidth * mainRatio - prop.mainVideo.x * mainRatio - prop.mainVideo.width * mainRatio;\r\n        var mainClipBottom = prop.videoHeight * mainRatio - prop.mainVideo.y * mainRatio - prop.mainVideo.height * mainRatio;\r\n        var mainClipLeft = prop.mainVideo.x * mainRatio;\r\n\r\n\r\n        //get the magin left value to fix the main video to the center.\r\n        var mainCenterX = prop.mainVideo.x * mainRatio + prop.mainVideo.width * mainRatio / 2;\r\n        var mainMarginLeft = winCenterX - mainCenterX;\r\n\r\n        //to delete the small gap btw face video and main video\r\n        //cos div has a small margin.\r\n        var differ = 0;\r\n        //get the margin bottom value to link the main video to the face video\r\n        if (prop.template.name == \"split\") {\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio + (totalFaceVideoHeight - facePreviewHeight) + differ;\r\n        } else\r\n            var mainMarginBottom = prop.mainVideo.y * mainRatio;\r\n\r\n\r\n        if (prop.template.name == \"smallfacecam\" || prop.template.name == \"square\") {\r\n            faceMarginBottom = prop.faceVideo.y * faceRatio + (totalMainVideoHeight * (1 - prop.template.gamerVideo.y));\r\n        }\r\n\r\n\r\n        var totalVideoDivHeight = displayPreviewWidth * sourceRatio;\r\n\r\n        /*********************************************************************************************************\r\n                                     \r\n                                                *****************\r\n                                                \r\n                                                    if template is \"blurred\"\r\n\r\n                                                *****************\r\n\r\n        *********************************************************************************************************/\r\n\r\n        // if (prop.template.name == \"blurred\") {\r\n        //     var srcRatio=prop.videoHeight/prop.videoWidth;\r\n        //     var blurRatio=prop.template.mainVideo.height/prop.template.mainVideo.width;\r\n        //     var ratioW = displayPreviewWidth / prop.mainVideo.width;\r\n        //     var ratioH = ratioW*blurRatio / prop.template.realHeight;\r\n        //     var blurPreW = displayPreviewWidth;\r\n        //     var blurPreH = displayPreviewWidth*blurRatio / prop.template.realHeight;\r\n        //     var totalBlurW = prop.videoWidth * ratioH;\r\n        //     var totalBlurH = prop.videoHeight * ratioH;\r\n        //     var blurClipTop = prop.mainVideo.y * ratioH;\r\n        //     var blurClipRight = totalBlurW - prop.mainVideo.x * ratioH - blurPreW;\r\n        //     var blurClipBottom = totalBlurH - prop.mainVideo.y * ratioH - blurPreH;\r\n        //     var blurClipLeft = prop.mainVideo.x * ratioH;\r\n\r\n        //     var BlurCenterX = prop.mainVideo.x * ratioH + blurPreW / 2;\r\n        //     var blurMarginLeft = winCenterX - BlurCenterX;\r\n        //     var blurMarginBottom=blurClipTop;\r\n\r\n        //     totalVideoDivHeight=blurPreH;\r\n        // }\r\n\r\n\r\n        //redirecting save page after receiving server response.\r\n        //pass recieved saved video file name and display percent. it is needed for syncronizing \r\n        //the size of video in preview page and save page.\r\n\r\n        if (this.state.shouldRedirect) {\r\n            localStorage.setItem('savedVideo', this.state.savedVideo)\r\n            localStorage.setItem('displayPercentInSave', displayPercentInSave)\r\n            return <Redirect\r\n                to={{\r\n                    pathname: 'save',\r\n                }}\r\n            />\r\n        }\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.loading\r\n                        ?\r\n                        <div style={{ width: '100%', justifyContent: 'center' }}>\r\n                            <ProgressBar now={this.state.progress} label={`${this.state.progress}%`} style={{ width: '100%' }} />\r\n                        </div>\r\n                        :\r\n                        <div >\r\n                            <div style={{ marginBottom: \"30px\" }}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.gamerVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select Facecam&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n\r\n                                    </Col>\r\n                                    <Col>\r\n                                        {\r\n                                            this.state.template && this.state.template.mainVideo\r\n                                                ?\r\n                                                <div>\r\n                                                    <span>Select gamefeed&nbsp;&nbsp;</span>\r\n                                                    <input type=\"checkbox\" checked value={1} readOnly />\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <span>Preview&nbsp;&nbsp;</span>\r\n                                        <input type=\"checkbox\" checked value={1} readOnly />\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                            <div style={{ maxHeight: totalVideoDivHeight, overflow: \"hidden\" }} >\r\n                                {\r\n                                    prop.template.name == \"split\"\r\n                                        ?\r\n                                        <div style={{ display: \"grid\" }}>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer}\r\n                                                onLoadedData={() => this.videoPlayer.current.play()}\r\n                                                width={totalFaceVideoWidth}\r\n                                                height={totalFaceVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${clipTop}px ${clipRight}px ${clipBottom}px ${clipLeft}px)`,\r\n                                                    left: faceMarginLeft,\r\n                                                    bottom: faceMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer_2}\r\n                                                onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                                width={totalMainVideoWidth}\r\n                                                height={totalMainVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                                    left: mainMarginLeft,\r\n                                                    bottom: mainMarginBottom\r\n                                                }}\r\n                                            >\r\n\r\n                                            </video>\r\n                                        </div>\r\n                                        : null\r\n                                }\r\n                                {\r\n                                    prop.template.name == \"fullscreen\"\r\n                                        ?\r\n                                        <video\r\n                                            muted\r\n                                            ref={this.videoPlayer_2}\r\n                                            onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                            width={totalMainVideoWidth}\r\n                                            height={totalMainVideoHeight}\r\n                                            src={this.state.videoFilePath}\r\n                                            style={{\r\n                                                position: 'relative',\r\n                                                clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                                left: mainMarginLeft,\r\n                                                bottom: mainMarginBottom\r\n                                            }}\r\n                                        >\r\n\r\n                                        </video>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {/* {\r\n                                    prop.template.name == \"blurred\"\r\n                                        ?\r\n                                        <video\r\n                                            muted\r\n                                            ref={this.videoPlayer_2}\r\n                                            onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                            width={totalBlurW}\r\n                                            height={totalBlurH}\r\n                                            src={this.state.videoFilePath}\r\n                                            style={{\r\n                                                position: 'relative',\r\n                                                clipPath: `inset(${blurClipTop}px ${blurClipRight}px ${blurClipBottom}px ${blurClipLeft}px)`,\r\n                                                left: blurMarginLeft,\r\n                                                bottom: blurMarginBottom\r\n                                            }}\r\n                                        >\r\n\r\n                                        </video>\r\n                                        :\r\n                                        null\r\n                                } */}\r\n\r\n                                {\r\n                                    prop.template.name == \"smallfacecam\" || prop.template.name == \"square\"\r\n                                        ?\r\n                                        <div style={{ display: \"grid\" }}>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer_2}\r\n                                                onLoadedData={() => this.videoPlayer_2.current.play()}\r\n                                                width={totalMainVideoWidth}\r\n                                                height={totalMainVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${mainClipTop}px ${mainClipRight}px ${mainClipBottom}px ${mainClipLeft}px)`,\r\n                                                    left: mainMarginLeft,\r\n                                                    bottom: mainMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                            <video\r\n                                                muted\r\n                                                ref={this.videoPlayer}\r\n                                                onLoadedData={() => this.videoPlayer.current.play()}\r\n                                                width={totalFaceVideoWidth}\r\n                                                height={totalFaceVideoHeight}\r\n                                                src={this.state.videoFilePath}\r\n                                                style={{\r\n                                                    position: 'relative',\r\n                                                    clipPath: `inset(${clipTop}px ${clipRight}px ${clipBottom}px ${clipLeft}px)`,\r\n                                                    left: faceMarginLeft,\r\n                                                    bottom: faceMarginBottom\r\n                                                }}\r\n                                            >\r\n                                            </video>\r\n                                        </div>\r\n                                        : null\r\n                                }\r\n\r\n                            </div>\r\n                            <div style={{ textAlign: \"center\", marginTop: '30px', marginBottom: 30 }}>\r\n                                <div>\r\n                                    <button onClick={this.goToTemplate}>\r\n                                        Change Template\r\n                                    </button>\r\n                                    <button onClick={this.goToRedo}>\r\n                                        Redo\r\n                                    </button>\r\n                                </div>\r\n                                <div>\r\n                                    <button onClick={this.sendSelectedVideo}>\r\n                                        save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n\r\nconst videoComponent = (props) => (\r\n\r\n    <video\r\n        autoPlay\r\n        loop\r\n        style={{ display: 'block', maxWidth: '100%' }}\r\n        onLoadStart={e => {\r\n            // You must inform ReactCrop when your media has loaded.\r\n            e.target.dispatchEvent(new Event('medialoaded', { bubbles: true }));\r\n        }}\r\n    >\r\n        <source src={props} type=\"video/mp4\" />\r\n    </video>\r\n);","import { openDB } from 'idb';\r\n\r\nconst dbPromise = openDB('keyval-store', 1, {\r\n  upgrade(db) {\r\n    db.createObjectStore('keyval');\r\n  },\r\n});\r\n\r\nexport async function get(key) {\r\n  return (await dbPromise).get('keyval', key);\r\n}\r\nexport async function set(key, val) {\r\n  return (await dbPromise).put('keyval', val, key);\r\n}\r\nexport async function del(key) {\r\n  return (await dbPromise).delete('keyval', key);\r\n}\r\nexport async function clear() {\r\n  return (await dbPromise).clear('keyval');\r\n}\r\nexport async function keys() {\r\n  return (await dbPromise).getAllKeys('keyval');\r\n}"],"sourceRoot":""}